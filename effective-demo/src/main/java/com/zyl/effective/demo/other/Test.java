package com.zyl.effective.demo.other;

public class Test {

	public static void main(String[] args) {
		func();
	}
	
	static Test st = new Test();
	static void func(){}

}
/**
 * 根据以上代码，关键问题理解 ：
1. 首先在执行此段代码时，首先由main方法的调用触发静态初妈化。
2. 在初始化Test类的静态部分时，遇到st类成员变量。
3. 但凑巧这个变量引用的本类的实例。
4. 那么问题来了，引时静态初始化过程还没有完成就要初始化实例部分了。是这样么？
5. 从人的角度是的。但从java的角度，一旦开始初始化静态部分，无论是否完成，后续都不会再重新触发静态初始化流程了。
6. 因此在实例化st变量时，实际是把实例初始化嵌入到了静态初始化流程中，并且嵌入到了静态初始化的起始位置。这就导致了实例初始化完全至于静态初始化之前，这也是导致a有值而b没有值的原因（其实整体理解就是，在类初始化阶段，若遇到类似静态成员变量指向自身实例，会将实例初始化方法插入到类初始化流程中，而位置则依赖该指向自身实例的静态成员变量在类初始化的位置）
7. 那么基于如上分析，执行结果就可理解了。
 * 
 * */
